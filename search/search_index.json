{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"iTELL","text":"<p>This is the documentation website for iTELL, an intelligent textbook framework developed by AI-ALOE and LEAR lab.</p> <ul> <li>What is iTELL</li> <li>Development</li> <li>Data Collection</li> </ul>"},{"location":"about/about/","title":"About iTELL","text":""},{"location":"about/about/#what-is-itell","title":"What is iTELL","text":"<p>iTELL is an open source framework for developing and deploying intelligent textbooks.</p>"},{"location":"about/about/#itell-features","title":"iTELL features","text":""},{"location":"about/about/#comprehension-checks","title":"Comprehension checks","text":"<p>Automate the whole process and reduce teacher workload: AI models will automatically create short answer questions, evaluate student responses, and provide appropriate feedback.</p> <p>iTELL automatically generates summary tasks and short answer questions tailored to your source material. Student responses are evaluated using state-of-the-art systems, ensuring that students understand the content they are reading. Students receive targeted, immediate feedback to help them efficiently address gaps in their understanding.</p>"},{"location":"about/about/#teacher-dashboard","title":"Teacher dashboard","text":"<p>Keep track of your students' progress: how many summaries they have submitted, what scores they have received, how many chapters they have finished, and more.</p>"},{"location":"about/about/#data-collection","title":"Data collection","text":"<p>Automatically collect rich data to further analyze your students' needs. Data automatically collected by iTELL include students' focus time on different parts of texts, the number of notes and highlights students left on different parts of texts, students' summary and short answer statistics, and more.</p>"},{"location":"about/about/#completely-open-source","title":"Completely Open Source","text":"<p>iTELL is completely open source and fully customizable.</p> <p>Visit the online user guide for one of our textbooks for more details.</p>"},{"location":"about/about/#who-are-the-developers","title":"Who are the developers","text":"<p>Visit the AI-ALOE website or the LEAR lab website.</p>"},{"location":"about/about/#contact-us","title":"Contact us","text":"<p>iTELL is motivated to work with teachers and organizations who are aligned with our mission of making instructional materials more interactive. Contact us at lear.lab.vu@gmail.com to start a discussion.</p>"},{"location":"data/","title":"Data Collection","text":"<p>iTELL is designed for use by academic researchers who are interested in measuring and improving student learning outcomes. By default, iTELL collects data on the following: - User Sessions - Written responses to short answer questions and summaries and scores associated with these responses - Keystroke records (only keys presses entered into an iTELL text box) - Clickstream data (scrolling, navigation, etc. -- only within the iTELL web app)</p> <p>The data that iTELL collects is stored on a secure database. When data is exported from iTELL for research purposes, all personally identifiable information is removed.</p>"},{"location":"data/focus/","title":"Focus Time","text":"<p>Focus time (the duration where something is visible in a user's viewport) is tracked on a per-section-element basis. When the user enters a section, the visible time of every text paragraph, figure and video elements get is recorded. The CSS selector used is</p> <pre><code>content.querySelectorAll(\"h1, h2, p, img, video, iframe\")\n</code></pre> <p>Every element is then assigned an integer id starting from zero with the being order the same as their order on the page.</p> <p>The entire collection of all the visibility times of all elements in the section is sent to firebase at a 60s interval. The visibility data of an element looks like</p> <pre><code>{\n// a combination of the element's type and the first 10 characters of its content nodeType--first10characters\n\"id\": \"H1--Overview\",\n// which subsection the element belongs to, e.g. the nearest previous h1 heading\n\"subSection\": \"Overview\",\n// timestamp of when the element becomes visible for the last time\n\"lastViewStarted\": 74143.5,\n// total view time during the 60s interval\n\"totalViewTime\": 27000,\n// if the element is visible at the time of sending\n\"visible\": false\n},\n</code></pre> <p>If a user leaves the page, by switching to another tab or close the browser, the timer automatically pauses.</p>"},{"location":"data/focus/#sample-data","title":"Sample data","text":"<pre><code>{\n\"uid\": \"APgf5SYmkkXu1d13fw25K4BxyRI3\",\n\"startTime\": \"January 13, 2023 at 11:13:19 AM UTC-6\",\n\"endTime\": \"January 13, 2023 at 11:13:49 AM UTC-6\",\n\"location\": {\n\"module\": 1,\n\"chapter\": 1,\n\"section\": 3\n},\n\"elements\": [\n{\n\"id\": \"H1--Overview\",\n\"lastViewStarted\": 2405.2999999523163,\n\"subSection\": \"Overview\",\n\"totalViewTime\": 0,\n\"visible\": false,\n},\n{\n\"id\": \"P--Data is very importa\",\n\"lastViewStarted\": 57660.5,\n\"subSection\": \"Introduction to FRED\",\n\"totalViewTime\": 1092.3999999761581,\n\"visible\": false\n},\n{\n\"id\": \"video--\",\n\"lastViewStarted\": 58910.799999952316,\n\"subSection\": \"Why Study Economics?\",\n\"totalViewTime\": 5719.100000023842\n\"visible\": false\n}\n// other elements on the page\n...\n]\n}\n</code></pre>"},{"location":"data/ga/","title":"Google Analytics","text":"<p>https://analytics.google.com/analytics/web/?authuser=1#/p335256466/reports/intelligenthome</p>"},{"location":"data/ga/#traffic-sources","title":"Traffic sources","text":"<p>How did the user access our website, e.g., direct visit, through search engine or external links. And where the user comes from, e.g. region, time zones.</p>"},{"location":"data/ga/#page-visits","title":"Page visits","text":"<p>Page view counts, up to per section in the textbook.</p>"},{"location":"data/ga/#scroll-depth","title":"Scroll depth","text":"<p>25%, 50%, 75% scroll depth.</p>"},{"location":"data/ga/#video-watches","title":"Video watches","text":"<p>Video watch counts of every embedded youtube video.</p>"},{"location":"data/identity/","title":"Identity Management","text":"<p>When a user first logs in, they are required to input some identity data. Currently we only support logins via Google account. We are working on additional authentication options: email/password, SSO with Learning Management Systems.</p>"},{"location":"data/identity/#sample-data","title":"Sample data","text":"<p>User data is stored in two places, FireBase's built-in user pool and FireStore.</p> <p>The user pool stores what is returned from the identity provider. For example, a user created via Google login has</p> <pre><code>{\n\"uid\": \"APgf5SYmkkXu1d13fw25K4BxyRI3\",\n\"email\": \"lear.lab.vu@gmail.com\",\n\"emailVerified\": true,\n\"displayName\": \"Scott Crossley\",\n\"isAnonymous\": false,\n\"photoURL\": \"https://lh3.googleusercontent.com/a/ALm5wu2RrwzPQYe1IZYKGuwug6BmvBROfV3kmyAiCb77=s96-c\",\n\"providerData\": [\n{\n\"providerId\": \"google.com\",\n\"uid\": \"112168403617264073813\",\n\"displayName\": \"Scott Crossley\",\n\"email\": \"lear.lab.vu@gmail.com\",\n\"phoneNumber\": null,\n\"photoURL\": \"https://lh3.googleusercontent.com/a/AEdFTp7GuDRSryTEoiSFSw45MUubMB-3a87030KOfSxi=s96-c\"\n}\n],\n\"stsTokenManager\": {\n\"refreshToken\": \"some token\",\n\"accessToken\": \"some token\",\n\"expirationTime\": 1672719819067\n},\n\"createdAt\": \"1666046663358\",\n\"lastLoginAt\": \"1672716219080\",\n\"apiKey\": \"some api key\",\n\"appName\": \"[DEFAULT]\"\n}\n</code></pre> <p>FireStore keeps a record of user data.</p> <pre><code>{\n\"displayName\": \"jane doe\",\n\"email\":  \"jane@gmail.com\",\n// the user's current progress submitting summaries, incremented everytime when the user submits a new successful\n\"location\": {\n\"module\": 1,\n\"chapter\": 1,\n\"section\": 4,\n},\n\"photoURL\": \"https://lh3.googleusercontent.com/a/ALm5wu08JCkPL9PCJEEfQhuIfOr1kV4fS534NAc74jBC7Q=s96-c\",\n// an array of sucessful summaries\n\"summaries\": []\n}\n</code></pre>"},{"location":"data/keystrokes/","title":"Keystroke Logging","text":"<p>Keystroke logging is recorded at every key-press and key-release event when the user focuses on the summary text field. Each key-press and key-release forms a pair that is one row in a keystroke record, and all the keystrokes will be submitted in batch once a summary has been made, regardless of whether it has passed the test.</p> <p>We also keep track of who (<code>uid</code>) and where (<code>module</code>, <code>chapter</code>, <code>section</code>) the keystrokes are submitted.</p>"},{"location":"data/keystrokes/#sample-data","title":"Sample data","text":"<pre><code>{\n\"uid\": \"hu8NH9M1aNRfWr5PJjOAA87qJF82\",\n\"location\": {\n\"module\" : 1,\n\"chapter\": 1,\n\"section\": 1,\n},\n\"keystrokes\": [\n{\n\"downKey\": \"v\",\n\"downTime\": \"15297.40000000596\",\n\"duration\": 131.7000000178814,\n\"eventId\": 1,\n\"upKey\": \"v\",\n\"upTime\" 15429.100000023842\n}\n]\n}\n</code></pre>"},{"location":"data/summary/","title":"Summary","text":"<p>A summary record contains its text content alongside its score. Summary is sent to firestore once a summary has been made and passes the requirement for the minimum number of words and language detection, regardless of whether it passes the quality check.</p> <p>Physically the summaries are stored as an array of the <code>users</code> collection.</p> <pre><code>{\n\"displayName\": \"jane doe\",\n\"email\":  \"jane@gmail.com\",\n// other user attributes\n...,\n\"summaries\": [\n{\n\"location\": {\n\"module\": 1,\n\"chapter\": 1,\n\"section\": 1\n},\n\"text\": \"sample text that is English and more than 50 words\",\n// unix timestamp\n\"timestamp\": 1666125567096\n}\n]\n}\n</code></pre>"},{"location":"development/content/","title":"Restructuring your Textbook for iTELL","text":""},{"location":"development/content/#modules-chapters-sections-and-subsections","title":"Modules, Chapters, Sections, and Subsections","text":"<pre><code>\u2514\u2500\u2500 Content/\n    \u2514\u2500\u2500 Section/\n        \u251c\u2500\u2500 Module 1/\n        \u2502   \u251c\u2500\u2500 Chapter 1/\n        \u2502   \u2502   \u251c\u2500\u2500 index.mdx\n        \u2502   \u2502   \u251c\u2500\u2500 section-1.mdx\n        \u2502   \u2502   \u2514\u2500\u2500 ...\n        \u2502   \u251c\u2500\u2500 Chapter 2/\n        \u2502   \u2502   \u251c\u2500\u2500 index.mdx\n        \u2502   \u2502   \u251c\u2500\u2500 section-1.mdx\n        \u2502   \u2502   \u2514\u2500\u2500 ...\n        \u2502   \u2514\u2500\u2500 ...\n        \u251c\u2500\u2500 Module 2\n        \u2514\u2500\u2500 ...\n</code></pre> <p>iTELL expects text content to be provided using three separate levels: <code>Modules</code> (optional), <code>Chapters</code>, <code>Sections</code>, and <code>Subsections</code>. <code>Modules</code> are collections of <code>Chapters</code>, and <code>Chapters</code> collections of <code>Sections</code>. Each <code>Module</code> and <code>Chapter</code> are represented as subdirectories in the <code>content</code> folder. Each <code>Section</code> is located within a <code>Chapter</code> directory as a <code>.md</code> or <code>.mdx</code> file. <code>Subsections</code> are an organizational unit used by iTELL to divide up long sections. In a <code>Section</code> Markdown file, iTELL uses Markdown Level-1 and Level-2 headings to divide the text into meaningful units. <code>Subsections</code> work best when they are 200-400 words long (about 3 paragraphs). </p> <p>iTELL is in the process of developing a feature that will facilitate the restructuring of any textbook into these levels. Currently, the recommendation is that individual content developers restructure their textbook to these four levels using their own discretion and custom scripts.</p>"},{"location":"development/content/#content-authoring","title":"Content Authoring","text":"<p>After you divide your textbook contents into <code>Sections</code> and create the appropriate file structure for your textbook, the contents then have to be formatted in Markdown. You can use regular Markdown (<code>.md</code>), which is a simple and intuitive language for text formatting. If you want to customize the content and appearance further, you can also include Javascript in your Markdown files (<code>.mdx</code>). We have created some predefined JavaScript components to increase your textbook's interactivity.</p>"},{"location":"development/content/#markdown","title":"Markdown","text":""},{"location":"development/content/#frontmatter","title":"Frontmatter","text":"<p>Each <code>Section</code> file should include a title card at the top, between two sets of three hyphens (---). This provides information about the <code>Section</code> page. <pre><code>---\ntitle: \"What Is Economics And Why Is It Important?\"\n---\n</code></pre></p>"},{"location":"development/content/#headings","title":"Headings","text":"<p>Headings are created with consecutive hash characters (#). iTELL uses Level-1 and Level-2 headings to divide the text into subsections. iTELL AI tools will ignore Level-3 and lower headings, but they can still be used to visually organize the text. </p>"},{"location":"development/content/#h1","title":"H1","text":""},{"location":"development/content/#h2","title":"H2","text":""},{"location":"development/content/#h3","title":"H3","text":"<p>... </p>"},{"location":"development/content/#general-markdown-formatting","title":"General Markdown Formatting","text":"<p>For Markdown formatting options that are not specific to iTELL, please refer to the following excellent guides: Markdown Guide and Chicago Docs.</p>"},{"location":"development/content/#javascript","title":"Javascript","text":"<p>iTELL supports supports the use of custom Javascript components in MDX (<code>.mdx</code>) files. Below are some custom components that come prebuilt with iTELL.</p>"},{"location":"development/content/#info-and-callout","title":"Info and Callout","text":""},{"location":"development/content/#info","title":"Info","text":"<pre><code>&lt;Info title=\"Title for info card\"&gt;\n\"Your content\"\n&lt;/Info&gt;\n</code></pre>"},{"location":"development/content/#callout","title":"Callout","text":"<pre><code>&lt;Callout&gt;\n\"Your content\"\n&lt;/Callout&gt;\n</code></pre>"},{"location":"development/content/#columns-image-and-youtubevideo","title":"Columns, Image, and YoutubeVideo","text":""},{"location":"development/content/#columns","title":"Columns","text":"<pre><code>&lt;Columns&gt;\n  &lt;Column&gt;\n    \"Your column 1 content\"\n  &lt;/Column&gt;\n  &lt;Column&gt;\n    \"Your column 2 content\"\n  &lt;/Column&gt;\n  ...\n&lt;/Columns&gt;\n</code></pre>"},{"location":"development/content/#image","title":"Image","text":"<pre><code>&lt;Image\n  src=\"Your image location\"\n  alt=\"Alternative information for your image\"\n&gt;\n  \"Text explaining your image\"\n&lt;/Image&gt;\n</code></pre>"},{"location":"development/content/#youtubevideo","title":"YoutubeVideo","text":"<pre><code>&lt;YoutubeVideo\n  width=\"Width value\"\n  height=\"Height value\"\n  src=\"Video source\"\n  title = \"Your custom video title\"\n&gt;\n\"Explanation of video content\"\n&lt;/YoutubeVideo&gt;\n</code></pre>"},{"location":"development/content/#accordion-and-tabs","title":"Accordion and Tabs","text":""},{"location":"development/content/#accordion","title":"Accordion","text":"<p> <pre><code>&lt;Accordion&gt;\n  &lt;AccordionItem value=\"Custom item value\" title=\"Individual accordion item title\"&gt;\n      \"Accordion content\"\n  &lt;/AccordionItem&gt;\n  &lt;AccordionItem value=\"Custom item value 2\" title=\"Individual accordion item title 2\"&gt;\n      \"Accordion content 2\"\n  &lt;/AccordionItem&gt;\n  ...\n&lt;/Accordion&gt;\n</code></pre></p>"},{"location":"development/content/#tabs","title":"Tabs","text":"<p> <pre><code>&lt;Tabs value=\"Default tab panel's value\"&gt;\n  &lt;TabsHeader&gt;\n    &lt;Tab value=\"1\"&gt;\"Tab 1 title\"/Tab&gt;\n    &lt;Tab value=\"2\"&gt;\"Tab 2 title\"&lt;/Tab&gt;\n    &lt;...&gt;\n  &lt;/TabsHeader&gt;\n  &lt;TabsBody&gt;\n    &lt;TabPanel value=\"1\"&gt;\n      \"Tab 1 content\"\n    &lt;/TabPanel&gt;\n    &lt;TabPanel value=\"2\"&gt;\n      \"Tab 2 content\"\n    &lt;/TabPanel&gt;\n    ...\n  &lt;/TabsBody&gt;\n&lt;/Tabs&gt;\n</code></pre></p>"},{"location":"development/content/#further-customization","title":"Further customization","text":"<p>Refer to <code>packages/ui/src/components/callout.tsx</code> to find other custom components provided by iTELL. You can also use these as a reference for creating your own components!</p>"},{"location":"development/dependency/","title":"Getting started","text":""},{"location":"development/dependency/#applications-and-databases","title":"Applications and Databases","text":"<p>iTELL requires the following applications and databases to be set up to function properly.</p> <ul> <li>Frontend (NextJS): https://github.com/learlab/itell</li> <li>Backend - scoring engine and API (FastAPI): https://github.com/learlab/textbook-summary-api</li> <li>Database (Postgres)</li> </ul> <p>In this tutorial, we will show you how to set up iTELL using some popular hosting services that have generous free tiers. You can also use your own hosting services of choice.</p>"},{"location":"development/dependency/#step-1-set-up-a-postgres-database","title":"Step 1. Set up a Postgres database","text":"<p>The default iTELL application uses Supabase. Migration will be handled by Prisma as part of Step 3. All required files for the migration are included in the prisma folder in the frontend application's Github repository.</p>"},{"location":"development/dependency/#step-2-set-up-the-backend","title":"Step 2. Set up the Backend","text":"<p>iTELL uses an AI-powered scoring API to evaluate student writing. It was developed using Python's FastAPI. You can use different setups and cloud services for local development and deployment, such as Google Cloud Run or Heroku. The API is packaged as a Docker container, so deployment is as easy as creating a <code>.env</code> file with information about your SupaBase database and deploying to a hosting service.</p> <p>Documentation for the API is located at the backend github repository.</p>"},{"location":"development/dependency/#step-3-deploy-itell-to-vercel","title":"Step 3. Deploy iTELL to Vercel","text":"<p>The default iTELL application uses Vercel. We will first go over the general setup requirements, and then we will provide a short example of what the deployment will look like when using Vercel.</p>"},{"location":"development/dependency/#environment-variables","title":"Environment variables","text":"<p>The following environment variables must be defined first Set up Google OAuth 2.0 and NextAuth for user authentication.</p> <pre><code>GOOGLE_CLIENT_ID=&lt;YOUR_GOOGLE_CLIENT_ID&gt;\nGOOGLE_CLIENT_SECRET=&lt;YOUR_GOOGLE_CLIENT_SECRET&gt;\nNEXTAUTH_URL=&lt;YOUR_BASEAPP_URL&gt;\nNEXTAUTH_SECRET=&lt;YOUR_NEXTAUTH_SECRET&gt;\nDATABASE_URL=&lt;YOUR_DATABASE_URI&gt; # from Step 1\nNEXT_PUBLIC_SCORE_API_URL=&lt;YOUR_SCORE_API_ENDPOINT&gt; # from Step 2\n</code></pre>"},{"location":"development/dependency/#install-packages-migrate-data-and-build","title":"Install packages, migrate data, and build","text":"<p>Install the required dependencies with pnpm, migrate the prisma schema after connecting your database, and build the web application: <pre><code>pnpm install\nnpx prisma migrate dev --name init\nturbo run build\n</code></pre></p>"},{"location":"development/dependency/#example-deployment-vercel","title":"Example deployment: Vercel","text":"<p>Use Vercel to deploy a quick testable version of iTELL.</p> <ol> <li>Create a Vercel account and connect your Github account to Vercel.</li> <li>Fork the frontend repository.</li> <li>Start a new Vercel project and import the frontend repo. </li> <li>Specify environment variables (listed above) and hit deploy. </li> <li>Confirm that your web application has been deployed. </li> </ol> <p>Refer to Vercel's documentation for more information about deploying your webapp in Vercel.</p>"}]}